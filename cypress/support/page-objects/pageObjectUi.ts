// the class names used in the selectors below are randomly generated by react and are not best practices to use as a way to locate elements. That why I added a page object model design to these tests. If the class names happen to change, I can easily just update the methods with the new class names below. In a perfect world, eveything I need to use to automate the application would have an aria-label or data-testid.

class PageObject {
  // selectors
  products = () => cy.get('.sc-124al1g-2');
  productImages = () => cy.get('.sc-124al1g-1');
  productTitles = () => cy.get('.sc-124al1g-4');
  productPrices = () => cy.get('.sc-124al1g-6');
  filterButtons = (availableSize: string) =>
    cy.contains('.sc-bj2vay-1 label', new RegExp(`^${availableSize.trim()}$`));
  addToCartButtons = () => cy.get('.sc-124al1g-0');
  productTitleInCart = () => cy.get('.sc-11uohgb-2');
  cartIconInCart = () => cy.get('.sc-1h98xa9-3');
  quantityOfProductInCart = () => cy.get('.sc-11uohgb-3');
  priceOfProductInCart = () => cy.get('.sc-11uohgb-4');
  subtotalInCart = () => cy.get('.sc-1h98xa9-9');
  cartQuantiyButtons = () => cy.get('.sc-11uohgb-4 div');
  addQuantityButton = () => cy.get('.sc-11uohgb-4 div button').last();
  removeQuantityButton = () => cy.get('.sc-11uohgb-4 div button').first();
  removeProductFromCartButton = () =>
    cy.get('[title="remove product from cart"]');
  productsInCart = () => cy.get('.sc-11uohgb-0');
  productCount = () => cy.get('.sc-ebmerl-4');

  // methods
  validateProductCount() {
    this.productCount()
      .invoke('text')
      .then((text) => {
        const productCount = Number(text.match(/\d+/)[0]);

        this.products().should('have.length', productCount);
      });
  }

  clickFilterButton(size: string) {
    this.filterButtons(size).click();
  }

  clickAddToCartButton(productNumber: number) {
    this.addToCartButtons().eq(productNumber).click();
  }

  clickAddQuantityButton(productNumber: number) {
    this.addQuantityButton().eq(productNumber).click();
  }

  clickRemoveQuantityButton(productNumber: number) {
    this.removeQuantityButton().eq(productNumber).click();
  }

  clickRemoveProductFromCartButton(productNumber: number) {
    this.removeProductFromCartButton().eq(productNumber).click();
  }
}
export default PageObject;
